{"version":3,"sources":["../../src/hoppfile/load.js"],"names":["cache","file","Error","lmod","mtime","state","Object","create","tasks","val","require","bustedTasks","task","hasOwnProperty","json","toJSON","Array","test","resolve"],"mappings":";;;;;;AAMA;;IAAYA,K;;AACZ;;AACA;;;;kBAEeC,QAAQ;AACrB;AACA,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED;AACA,QAAMC,OAAO,CAAC,kBAASF,IAAT,EAAeG,KAA7B;;AAEA;AACA,QAAMC,QAAQC,OAAOC,MAAP,CAAc,IAAd,CAAd,CACC,CAACF,MAAMF,IAAP,EAAaE,MAAMG,KAAnB,IAA4BR,MAAMS,GAAN,CAAU,GAAV,KAAkB,EAA9C;;AAED,MAAIJ,MAAMF,IAAN,KAAeA,IAAnB,EAAyB;AACvB,WAAO,CAAC,IAAD,EAAOG,OAAOC,MAAP,CAAc,IAAd,CAAP,EAA4BF,MAAMG,KAAlC,CAAP;AACD;;AAED;AACA,QAAMA,QAAQE,QAAQT,IAAR,CAAd;;AAEA;AACAI,QAAMG,KAAN,GAAcH,MAAMG,KAAN,IAAe,EAA7B;AACA,QAAMG,cAAc,EAApB;;AAEA;AACA,OAAK,IAAIC,IAAT,IAAiBJ,KAAjB,EAAwB;AACtB,QAAIH,MAAMG,KAAN,CAAYK,cAAZ,CAA2BD,IAA3B,CAAJ,EAAsC;AACpC,YAAME,OAAON,MAAMI,IAAN,EAAYG,MAAZ,EAAb;;AAEA,UAAI,EAAED,gBAAgBE,KAAlB,KAA4B,CAAC,sBAAUF,IAAV,EAAgBT,MAAMG,KAAN,CAAYI,IAAZ,CAAhB,CAAjC,EAAqE;AACnED,oBAAYC,IAAZ,IAAoB,IAApB;AACD;AACF;AACF;;AAED;AACAZ,QAAMS,GAAN,CACE,GADF,EAGE,cAAcQ,IAAd,CAAmB,sBAAaP,QAAQQ,OAAR,CAAgBjB,IAAhB,CAAb,EAAoC,MAApC,CAAnB;;AAEA;AAFA,IAGI,CACA,CADA,EAEA,IAFA;;AAKF;AARF,IASI,CACAE,IADA,EAEAK,KAFA,CAZN;;AAkBA;AACA,SAAO,CAAC,KAAD,EAAQG,WAAR,EAAqBH,KAArB,CAAP;AACD,C,EAlED","file":"../../src/hoppfile/load.js","sourcesContent":["/**\n * @file src/utils/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport * as cache from '../cache'\nimport { deepEqual } from '../utils'\nimport { statSync, readFileSync } from 'fs'\n\nexport default file => {\n  // if bad args die\n  if (typeof file !== 'string') {\n    throw new Error('Unknown arguments')\n  }\n\n  // get file stat\n  const lmod = +statSync(file).mtime\n\n  // try to load from cache\n  const state = Object.create(null)\n  ;[state.lmod, state.tasks] = cache.val('_') || []\n\n  if (state.lmod === lmod) {\n    return [true, Object.create(null), state.tasks]\n  }\n\n  // load via require\n  const tasks = require(file)\n\n  // figure out which tasks are bust\n  state.tasks = state.tasks || {}\n  const bustedTasks = {}\n\n  // only try checking for single tasks\n  for (let task in tasks) {\n    if (state.tasks.hasOwnProperty(task)) {\n      const json = tasks[task].toJSON()\n\n      if (!(json instanceof Array) && !deepEqual(json, state.tasks[task])) {\n        bustedTasks[task] = true\n      }\n    }\n  }\n\n  // cache exports\n  cache.val(\n    '_',\n\n    /function|=>/.test(readFileSync(require.resolve(file), 'utf8'))\n\n    // if any functions exist, we can't cache the file\n      ? [\n        0,\n        null\n      ]\n\n      // otherwise, cache normally\n      : [\n        lmod,\n        tasks\n      ]\n  )\n\n  // return exports\n  return [false, bustedTasks, tasks]\n}\n"]}