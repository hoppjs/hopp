{"version":3,"sources":["../src/index.js"],"names":["cache","Goal","hoppfile","debug","error","require","EventEmitter","defaultMaxListeners","projectDir","process","cwd","fail","err","stack","saveLog","lastErr","exit","args","d","r","R","j","s","v","V","h","largestArg","argv","slice","string","boolean","env","RECACHE","recache","WEB_CONCURRENCY","jobs","SKIP_BUILD","skip","help","console","log","a","repeat","length","version","tasks","_","Array","forEach","mod","HOPP_DEBUG","verbose","directory","resolve","find","file","load","hopp","_resolve","_resolveFilename","what","parent","id","filename","loaded","exports","fromCache","busted","taskDefns","fullList","call","addDependencies","task","concat","sub","defineTasks","create","then","save"],"mappings":"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","file":"../src/index.js","sourcesContent":["/**\n * @file index.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport Module from 'module'\nimport * as cache from './cache'\nimport createHopp from './hopp'\nimport fromTree from './tasks/tree'\nimport * as Goal from './tasks/goal'\nimport * as hoppfile from './hoppfile'\nimport createLogger from './utils/log'\n\nconst { debug, error } = createLogger('hopp')\n\n/**\n * Extend the number of default listeners because 10\n * gets hit pretty quickly with piping streams.\n */\nrequire('events').EventEmitter.defaultMaxListeners = 50\n\n/**\n * This is resolved to the directory with a hoppfile later\n * on but it is globally scoped in this module so that we can\n * save debug logs to it.\n */\nlet projectDir = process.cwd()\n\n/**\n * Handle exit.\n */\nfunction fail (err) {\n  error(err && err.stack ? err.stack : err)\n\n  try {\n    createLogger.saveLog(projectDir)\n  } catch (lastErr) {\n    error(lastErr && lastErr.stack ? lastErr.stack : lastErr)\n  }\n\n  process.exit(-1)\n}\n\ntry {\n  /**\n   * Parse args\n   */\n  const args = {\n    d: ['directory', 'set path to project directory'],\n    r: ['require', 'require a module before doing anything'],\n    R: ['recache', 'force cache busting'],\n    j: ['jobs', 'set number of jobs to use for parallel tasks'],\n    s: ['skip', 'skip any building (just updates the lockfile)'],\n    v: ['verbose', 'enable debug messages'],\n    V: ['version', 'get version info'],\n    h: ['help', 'display this message']\n  }\n\n  // parse via minimist\n  let largestArg = ''\n  const argv = require('minimist')(process.argv.slice(2), {\n    string: [\n      'directory', 'd',\n      'require', 'r',\n      'jobs', 'j'\n    ],\n\n    boolean: [\n      'recache', 'R',\n      'verbose', 'v',\n      'version', 'V',\n      'help', 'h',\n      'skip', 's'\n    ]\n  })\n\n  // expose argv to env\n  process.env.RECACHE = argv.recache || argv.R\n  process.env.WEB_CONCURRENCY = argv.jobs || argv.j\n  process.env.SKIP_BUILD = argv.skip || argv.s\n\n  /**\n   * Print help.\n   */\n  const help = () => {\n    console.log('usage: hopp [OPTIONS] [TASKS]')\n    console.log('')\n\n    for (let a in args) {\n      console.log('  -%s, --%s%s%s', a, args[a][0], ' '.repeat(largestArg.length - args[a][0].length + 2), args[a][1])\n    }\n\n    process.exit(1)\n  }\n\n  if (argv.version || argv.V) {\n    console.log(require('../package.json').version)\n    process.exit(0)\n  }\n\n  /**\n   * Currently the only way for help to be called.\n   * Later, it should also happen on invalid args but we\n   * don't have invalid arguments yet.\n   *\n   * Invalid arguments is a flag misuse - never a missing\n   * task. That error should be more minimal and separate.\n   */\n  if (argv.help || argv.h) {\n    help()\n  }\n\n  /**\n   * Set tasks.\n   */\n  const tasks = argv._.length === 0 ? ['default'] : argv._\n\n  /**\n   * Require whatever needs to be loaded.\n   */\n  argv.require = argv.require || argv.r\n  if (argv.require) {\n    ;(argv.require instanceof Array ? argv.require : [argv.require])\n      .forEach(mod => require(mod))\n  }\n\n  /**\n   * Pass verbosity through to the env.\n   */\n  process.env.HOPP_DEBUG = process.env.HOPP_DEBUG || !!argv.verbose || !!argv.v\n  debug('Setting HOPP_DEBUG = %j', process.env.HOPP_DEBUG)\n\n  /**\n   * If project directory not specified, do lookup for the\n   * hoppfile.js\n   */\n  projectDir = (directory => {\n    // absolute paths don't need correcting\n    if (directory[0] === '/') {\n      return directory\n    }\n\n    // sort-of relatives should be made into relative\n    if (directory[0] !== '.') {\n      directory = './' + directory\n    }\n\n    // map to current directory\n    return path.resolve(process.cwd(), directory)\n  })(argv.directory || argv.d || hoppfile.find(process.cwd()))\n\n  /**\n   * Set hoppfile location relative to the project.\n   *\n   * This will cause errors later if the directory was supplied\n   * manually but contains no hoppfile. We don't want to do a magic\n   * lookup for the user because they overrode the magic with the\n   * manual flag.\n   */\n  const file = projectDir + '/hoppfile.js'\n  debug('Using hoppfile.js @ %s', file)\n\n  /**\n   * Load cache.\n   */\n  cache.load(projectDir)\n\n  /**\n   * Create hopp instance creator.\n   */\n  const hopp = createHopp(projectDir)\n\n  /**\n   * Cache the hopp handler to make `require()` work\n   * in the hoppfile.\n   */\n  const _resolve = Module._resolveFilename\n  Module._resolveFilename = (what, parent) => {\n    return what === 'hopp' ? what : _resolve(what, parent)\n  }\n\n  require.cache.hopp = {\n    id: 'hopp',\n    filename: 'hopp',\n    loaded: true,\n    exports: hopp\n  }\n\n  /**\n   * Load tasks from file.\n   */\n  const [fromCache, busted, taskDefns] = hoppfile.load(file)\n\n  /**\n   * Parse from cache.\n   */\n  if (fromCache) {\n    // create copy of tasks, we don't want to modify\n    // the actual goal list\n    let fullList = [].slice.call(tasks)\n\n    // walk the full tree\n    const addDependencies = task => {\n      if (taskDefns[task] instanceof Array) {\n        fullList = fullList.concat(taskDefns[task][1])\n        taskDefns[task][1].forEach(sub => addDependencies(sub))\n      }\n    }\n\n    // start walking from top\n    fullList.forEach(task => addDependencies(task))\n\n    // parse all tasks and their dependencies\n    fromTree(taskDefns, fullList)\n  }\n\n  /**\n   * Wait for task completion.\n   */\n  Goal.defineTasks(taskDefns, busted)\n  Goal.create(tasks, projectDir)\n    .then(() => {\n      /**\n       * Store cache for later, then exit.\n       */\n      cache.save(projectDir)\n      process.exit(0)\n    }, fail)\n} catch (err) {\n  fail(err)\n}\n"]}