{"version":3,"sources":["../src/index.js"],"names":["cache","Goal","hoppfile","debug","error","require","EventEmitter","defaultMaxListeners","projectDir","process","cwd","args","d","r","R","j","s","v","V","h","largestArg","argv","slice","string","boolean","env","RECACHE","recache","WEB_CONCURRENCY","jobs","SKIP_BUILD","skip","help","console","log","a","repeat","length","exit","version","tasks","_","Array","forEach","mod","HOPP_DEBUG","verbose","directory","resolve","find","file","load","hopp","_resolve","_resolveFilename","what","parent","id","filename","loaded","exports","fromCache","busted","taskDefns","fullList","call","addDependencies","task","concat","sub","defineTasks","create","then","save","err","end","lastErr","stack","saveLog","catch"],"mappings":"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","file":"../src/index.js","sourcesContent":["/**\n * @file index.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport Module from 'module'\nimport * as cache from './cache'\nimport createHopp from './hopp'\nimport fromTree from './tasks/tree'\nimport * as Goal from './tasks/goal'\nimport * as hoppfile from './hoppfile'\nimport createLogger from './utils/log'\n\nconst { debug, error } = createLogger('hopp')\n\n/**\n * Extend the number of default listeners because 10\n * gets hit pretty quickly with piping streams.\n */\nrequire('events').EventEmitter.defaultMaxListeners = 50\n\n/**\n * This is resolved to the directory with a hoppfile later\n * on but it is globally scoped in this module so that we can\n * save debug logs to it.\n */\nlet projectDir = process.cwd()\n\n/**\n * Parse args\n */\nconst args = {\n  d: ['directory', 'set path to project directory'],\n  r: ['require', 'require a module before doing anything'],\n  R: ['recache', 'force cache busting'],\n  j: ['jobs', 'set number of jobs to use for parallel tasks'],\n  s: ['skip', 'skip any building (just updates the lockfile)'],\n  v: ['verbose', 'enable debug messages'],\n  V: ['version', 'get version info'],\n  h: ['help', 'display this message']\n}\n\n// parse via minimist\nlet largestArg = ''\nconst argv = require('minimist')(process.argv.slice(2), {\n  string: [\n    'directory', 'd',\n    'require', 'r',\n    'jobs', 'j'\n  ],\n\n  boolean: [\n    'recache', 'R',\n    'verbose', 'v',\n    'version', 'V',\n    'help', 'h',\n    'skip', 's'\n  ]\n})\n\n// expose argv to env\nprocess.env.RECACHE = argv.recache || argv.R\nprocess.env.WEB_CONCURRENCY = argv.jobs || argv.j\nprocess.env.SKIP_BUILD = argv.skip || argv.s\n\n/**\n * Print help.\n */\nfunction help () {\n  console.log('usage: hopp [OPTIONS] [TASKS]')\n  console.log('')\n\n  for (let a in args) {\n    console.log('  -%s, --%s%s%s', a, args[a][0], ' '.repeat(largestArg.length - args[a][0].length + 2), args[a][1])\n  }\n\n  process.exit(1)\n}\n\nif (argv.version || argv.V) {\n  console.log(require('../package.json').version)\n  process.exit(0)\n}\n\n/**\n * Currently the only way for help to be called.\n * Later, it should also happen on invalid args but we\n * don't have invalid arguments yet.\n *\n * Invalid arguments is a flag misuse - never a missing\n * task. That error should be more minimal and separate.\n */\nif (argv.help || argv.h) {\n  help()\n}\n\n/**\n * Set tasks.\n */\nconst tasks = argv._.length === 0 ? ['default'] : argv._\n\n/**\n * Require whatever needs to be loaded.\n */\nargv.require = argv.require || argv.r\nif (argv.require) {\n  ;(argv.require instanceof Array ? argv.require : [argv.require])\n    .forEach(mod => require(mod))\n}\n\n/**\n * Pass verbosity through to the env.\n */\nprocess.env.HOPP_DEBUG = process.env.HOPP_DEBUG || !!argv.verbose || !!argv.v\ndebug('Setting HOPP_DEBUG = %j', process.env.HOPP_DEBUG)\n\n/**\n * If project directory not specified, do lookup for the\n * hoppfile.js\n */\nprojectDir = (directory => {\n  // absolute paths don't need correcting\n  if (directory[0] === '/') {\n    return directory\n  }\n\n  // sort-of relatives should be made into relative\n  if (directory[0] !== '.') {\n    directory = './' + directory\n  }\n\n  // map to current directory\n  return path.resolve(process.cwd(), directory)\n})(argv.directory || hoppfile.find(process.cwd()))\n\n/**\n * Set hoppfile location relative to the project.\n *\n * This will cause errors later if the directory was supplied\n * manually but contains no hoppfile. We don't want to do a magic\n * lookup for the user because they overrode the magic with the\n * manual flag.\n */\nconst file = projectDir + '/hoppfile.js'\ndebug('Using hoppfile.js @ %s', file)\n\n/**\n * Load cache.\n */\ncache.load(projectDir)\n\n/**\n * Create hopp instance creator.\n */\nconst hopp = createHopp(projectDir)\n\n/**\n * Cache the hopp handler to make `require()` work\n * in the hoppfile.\n */\nconst _resolve = Module._resolveFilename\nModule._resolveFilename = (what, parent) => {\n  return what === 'hopp' ? what : _resolve(what, parent)\n}\n\nrequire.cache.hopp = {\n  id: 'hopp',\n  filename: 'hopp',\n  loaded: true,\n  exports: hopp\n}\n\n/**\n * Load tasks from file.\n */\nconst [fromCache, busted, taskDefns] = hoppfile.load(file)\n\n/**\n * Parse from cache.\n */\nif (fromCache) {\n  // create copy of tasks, we don't want to modify\n  // the actual goal list\n  let fullList = [].slice.call(tasks)\n\n  // walk the full tree\n  const addDependencies = task => {\n    if (taskDefns[task] instanceof Array) {\n      fullList = fullList.concat(taskDefns[task][1])\n      taskDefns[task][1].forEach(sub => addDependencies(sub))\n    }\n  }\n\n  // start walking from top\n  fullList.forEach(task => addDependencies(task))\n\n  // parse all tasks and their dependencies\n  fromTree(taskDefns, fullList)\n}\n\n/**\n * Wait for task completion.\n */\nGoal.defineTasks(taskDefns, busted)\nGoal.create(tasks, projectDir)\n  .then(() => {\n    /**\n     * Store cache for later, then exit.\n     */\n    cache.save(projectDir)\n    process.exit(0)\n  }, err => {\n    function end (lastErr) {\n      if (lastErr) {\n        error(lastErr && lastErr.stack ? lastErr.stack : lastErr)\n      }\n\n      process.exit(-1)\n    }\n\n    error(err && err.stack ? err.stack : err)\n\n    createLogger.saveLog(projectDir)\n      .then(() => end())\n      .catch(err => end(err))\n  })\n"]}