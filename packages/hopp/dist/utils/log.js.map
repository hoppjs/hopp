{"version":3,"sources":["../../src/utils/log.js"],"names":["colors","HOPP_COLOR","color","nextColor","length","useColors","process","stdout","isTTY","ERROR","wrapColor","str","dim","debugOutput","fmt","namespace","log","msg","args","i","arguments","push","format","apply","console","env","HOPP_DEBUG","cache","Object","create","module","exports","nm","debug","error","saveLog","directory","join","map","EOL"],"mappings":";;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;AAGA,MAAMA,SAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAf;;AAEA;;;AAlBA;;;;;AAKA;;AAgBA,MAAMC,aAAa,CAAnB;;AAEA;;;AAGA,IAAIC,QAAQ,CAAC,CAAb;AACA,SAASC,SAAT,GAAsB;AACpBD,WAAS,CAAT;AACAA,UAAQA,UAAUF,OAAOI,MAAjB,GAA0B,CAA1B,GAA8BF,KAAtC;;AAEA,SAAOF,OAAOE,KAAP,CAAP;AACD;;AAED;;;;AAIA,MAAMG,YAAYC,QAAQC,MAAR,CAAeC,KAAjC;;AAEA;;;AAGA,MAAMC,QAAQJ,YAAY,uBAAZ,GAAsC,GAApD;;AAEA;;;AAGA,SAASK,SAAT,CAAoBC,GAApB,EAAyB;AACvB,QAAMT,QAAQS,QAAQ,MAAR,GAAiBV,UAAjB,GAA8BE,WAA5C;AACA,SAAOE,YAAa,WAAUH,KAAM,IAAGS,GAAI,YAApC,GAAkDA,GAAzD;AACD;;AAED;;;AAGA,SAASC,GAAT,CAAcD,GAAd,EAAmB;AACjB,SAAQ,aAAYA,GAAI,YAAxB;AACD;;AAED;;;AAGA,MAAME,cAAc,EAApB;;AAEA;;;AAGA,SAASC,GAAT,CAAcC,SAAd,EAAyBC,GAAzB,EAA8B;AAC5B,SAAO,UAAUC,GAAV,EAAe;AACpB,UAAMC,OAAO,CAAE,IAAGF,QAAQ,OAAR,GAAkBP,KAAlB,GAA0B,GAAI,IAAGM,SAAU,IAAGC,QAAQ,OAAR,GAAkBJ,IAAIK,GAAJ,CAAlB,GAA6BA,GAAI,EAApF,CAAb;;AAEA,SAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIC,UAAUhB,MAA9B,EAAsCe,GAAtC,EAA2C;AACzCD,WAAKG,IAAL,CAAUD,UAAUD,CAAV,CAAV;AACD;;AAED;AACA,UAAMR,MAAM,eAAKW,MAAL,CAAYC,KAAZ,CAAkBC,OAAlB,EAA2BN,IAA3B,CAAZ;;AAEA;AACAL,gBAAYQ,IAAZ,CAAiBV,GAAjB;;AAEA;AACA,QAAIK,QAAQ,OAAR,IAAmBV,QAAQmB,GAAR,CAAYC,UAAZ,KAA2B,MAAlD,EAA0D;AACxD,aAAOF,QAAQR,QAAQ,OAAR,GAAkB,OAAlB,GAA4BA,GAApC,EAAyCL,GAAzC,CAAP;AACD;AACF,GAjBD;AAkBD;;AAED;;;AAGA,MAAMgB,QAAQC,OAAOC,MAAP,CAAc,IAAd,CAAd;;AAEA;;;;;;AAMAC,OAAOC,OAAP,GAAiBhB,aAAa;AAC5B;AACA,QAAMiB,KAAKjB,SAAX;AACA,MAAIY,MAAMK,EAAN,CAAJ,EAAe,OAAOL,MAAMK,EAAN,CAAP;;AAEf;AACAjB,cAAYL,UAAUK,SAAV,CAAZ;;AAEA;AACA,SAAQY,MAAMK,EAAN,IAAY;AAClBhB,SAAKF,IAAIC,SAAJ,EAAe,KAAf,CADa;AAElBkB,WAAOnB,IAAIC,SAAJ,EAAe,OAAf,CAFW;AAGlBmB,WAAOpB,IAAIC,SAAJ,EAAe,OAAf;AAHW,GAApB;AAKD,CAdD;;AAgBA;;;AAGAe,OAAOC,OAAP,CAAeI,OAAf,GAAyBC,aAAa;AACpC,yBAAc,eAAKC,IAAL,CAAUD,SAAV,EAAqB,gBAArB,CAAd,EAAsDvB,YAAYyB,GAAZ,sBAAuBD,IAAvB,CAA4B,aAAGE,GAA/B,CAAtD;;AAEAf,UAAQU,KAAR,CAAc,4BAAd,EAA4CE,SAA5C;AACAZ,UAAQU,KAAR,CAAc,0FAAd,EAA0G,WAA1G,EAAuH,YAAvH;AACD,CALD","file":"../../src/utils/log.js","sourcesContent":["/**\n * @file src/utils/log.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n/* eslint no-console: 'off' */\n\nimport os from 'os'\nimport util from 'util'\nimport path from 'path'\nimport strip from 'strip-ansi'\nimport { writeFileSync } from 'fs'\n\n/**\n * Selected colors - borrowed from `debug`.\n */\nconst colors = [2, 3, 4, 5, 1]\n\n/**\n * This color is reserved for `hopp` logs.\n */\nconst HOPP_COLOR = 6\n\n/**\n * Manage distributed colors.\n */\nlet color = -1\nfunction nextColor () {\n  color += 1\n  color = color === colors.length ? 0 : color\n\n  return colors[color]\n}\n\n/**\n * Basic attempt to figure out if colors should\n * be used or not.\n */\nconst useColors = process.stdout.isTTY\n\n/**\n * Create error mark.\n */\nconst ERROR = useColors ? '\\u001b[31m✖\\u001b[39m' : '✖'\n\n/**\n * Wraps a string with color escapes.\n */\nfunction wrapColor (str) {\n  const color = str === 'hopp' ? HOPP_COLOR : nextColor()\n  return useColors ? `\\u001b[3${color}m${str}\\u001b[39m` : str\n}\n\n/**\n * Dimify string.\n */\nfunction dim (str) {\n  return `\\u001b[90m${str}\\u001b[39m`\n}\n\n/**\n * Complete record of logging events.\n */\nconst debugOutput = []\n\n/**\n * Create generic logger function.\n */\nfunction fmt (namespace, log) {\n  return function (msg) {\n    const args = [` ${log === 'error' ? ERROR : ' '} ${namespace} ${log === 'debug' ? dim(msg) : msg}`]\n\n    for (let i = 1; i < arguments.length; i++) {\n      args.push(arguments[i])\n    }\n\n    // create log string\n    const str = util.format.apply(console, args)\n\n    // add to record\n    debugOutput.push(str)\n\n    // log to console\n    if (log !== 'debug' || process.env.HOPP_DEBUG === 'true') {\n      return console[log === 'debug' ? 'error' : log](str)\n    }\n  }\n}\n\n/**\n * Cache loggers for repeat calls.\n */\nconst cache = Object.create(null)\n\n/**\n * Create debug-like loggers attached to given\n * namespace & stdout+stderr.\n * @param {String} namespace the namespace to lock your logger into\n * @return {Object} contains log, debug, and error methods\n */\nmodule.exports = namespace => {\n  // check cache\n  const nm = namespace\n  if (cache[nm]) return cache[nm]\n\n  // colorize namespace\n  namespace = wrapColor(namespace)\n\n  // return loggers\n  return (cache[nm] = {\n    log: fmt(namespace, 'log'),\n    debug: fmt(namespace, 'debug'),\n    error: fmt(namespace, 'error')\n  })\n}\n\n/**\n * Write debug log to file on failure.\n */\nmodule.exports.saveLog = directory => {\n  writeFileSync(path.join(directory, 'hopp-debug.log'), debugOutput.map(strip).join(os.EOL))\n\n  console.error('\\nSaved debug info to: %s.', directory)\n  console.error('Please use this log file to submit an issue @ %shttps://github.com/hoppjs/hopp/issues%s.', '\\u001B[4m', '\\u001B[24m')\n}\n"]}