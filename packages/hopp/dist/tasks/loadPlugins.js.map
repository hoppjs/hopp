{"version":3,"sources":["../../src/tasks/loadPlugins.js"],"names":["cache","directory","pkgFile","pkg","require","pkgStat","mtime","savedStat","list","val","key","hasOwnProperty","dep","start","substr","Object","keys"],"mappings":";;;;;;;;AAMA;;AACA;;IAAYA,K;;;;AAEZ;;;;;AATA;;;;;;;sCAce,WAAMC,SAAN,EAAmB;AAChC,UAAMC,UAAUD,YAAY,eAA5B;;AAEA;AACA,QAAI,EAAC,6BAAM,gBAAOC,OAAP,CAAN,CAAD,CAAJ,EAA4B;AAC1B;AACD;;AAED,UAAMC,MAAMC,QAAQF,OAAR,CAAZ;AACA,UAAMG,UAAU,CAAC,CAAC,6BAAM,cAAKH,OAAL,CAAN,CAAD,EAAsBI,KAAvC;;AAEA,QAAI,CAACC,SAAD,EAAYC,IAAZ,IAAoBR,MAAMS,GAAN,CAAU,IAAV,KAAmB,CAAC,CAAD,EAAI,EAAJ,CAA3C;;AAEA;;;AAGA,QAAIF,cAAcF,OAAlB,EAA2B;AACzB,aAAOG,IAAP;AACD;;AAED;;;AAGAA,WAAO,EAAP;AACA,SAAK,MAAME,GAAX,IAAkB,CAAC,cAAD,EAAiB,iBAAjB,EAAoC,kBAApC,CAAlB,EAA2E;AACzE,UAAIP,IAAIQ,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,aAAK,MAAME,GAAX,IAAkBT,IAAIO,GAAJ,CAAlB,EAA4B;AAC1B,cAAIP,IAAIO,GAAJ,EAASC,cAAT,CAAwBC,GAAxB,CAAJ,EAAkC;AAChC,kBAAMC,QAAQD,IAAIE,MAAJ,CAAW,CAAX,EAAc,EAAd,CAAd;;AAEA,gBAAID,UAAU,cAAV,IAA4BA,UAAU,cAA1C,EAA0D;AACxDL,mBAAKI,GAAL,IAAYG,OAAOC,IAAP,CACVZ,QAAS,GAAEH,SAAU,iBAAgBW,GAAI,EAAzC,CADU,CAAZ;AAGD;AACF;AACF;AACF;AACF;;AAED;;;AAGAZ,UAAMS,GAAN,CAAU,IAAV,EAAgB,CACdJ,OADc,EAEdG,IAFc,CAAhB;;AAKA;;;AAGA,WAAOA,IAAP;AACD,G","file":"../../src/tasks/loadPlugins.js","sourcesContent":["/**\n * @file src/plugins/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport { stat, exists } from '../fs'\nimport * as cache from '../cache'\n\n/**\n * Loads the list of plugins defined in the package.json.\n * @param {String} path to directory with package.json\n * @return {Promise} resolves with array of paths to plugins\n */\nexport default async directory => {\n  const pkgFile = directory + '/package.json'\n\n  // ignore if there is no package.json file\n  if (!await exists(pkgFile)) {\n    return\n  }\n\n  const pkg = require(pkgFile)\n  const pkgStat = +(await stat(pkgFile)).mtime\n\n  let [savedStat, list] = cache.val('pl') || [0, {}]\n\n  /**\n   * Return cached result if unmodified.\n   */\n  if (savedStat === pkgStat) {\n    return list\n  }\n\n  /**\n   * Filter for appropriate dependencies.\n   */\n  list = {}\n  for (const key of ['dependencies', 'devDependencies', 'peerDependencies']) {\n    if (pkg.hasOwnProperty(key)) {\n      for (const dep in pkg[key]) {\n        if (pkg[key].hasOwnProperty(dep)) {\n          const start = dep.substr(0, 12)\n\n          if (start === 'hopp-plugin-' || start === 'hopp-preset-') {\n            list[dep] = Object.keys(\n              require(`${directory}/node_modules/${dep}`)\n            )\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Store in cache.\n   */\n  cache.val('pl', [\n    pkgStat,\n    list\n  ])\n\n  /**\n   * Return saved list.\n   */\n  return list\n}\n"]}