{"version":3,"sources":["../src/hopp.js"],"names":["cache","debug","require","normalize","name","normalized","i","length","toUpperCase","createMethod","type","plugName","method","directory","args","arguments","d","stack","push","pluginArgs","Object","create","preset","resolve","substack","apply","forEach","row","addPlugin","plugins","indexOf","fn","undefined","Error","fromCache","init","src","all","steps","watch","load","pathToPlugin","pluginName","_","basename","localPlugins","valOr","keys"],"mappings":"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","file":"../src/hopp.js","sourcesContent":["/**\n * @file src/hopp.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc..\n */\n\nimport path from 'path'\nimport Hopp from './tasks/mgr'\nimport * as cache from './cache'\nimport createSteps from './tasks/steps'\nimport createWatch from './tasks/watch'\nimport loadPlugins from './tasks/loadPlugins'\nimport createParallel from './tasks/parallel'\n\nconst { debug } = require('./utils/log')('hopp')\n\n/**\n * Normalizes a plugin/preset name to be added to\n * the prototype.\n */\nfunction normalize (name) {\n  let normalized = ''\n\n  for (let i = 12; i < name.length; i += 1) {\n    normalized += name[i] === '-' ? name[i++].toUpperCase() : name[i]\n  }\n\n  return normalized\n}\n\n/**\n * Generates a proxy method that allows all the plugin calls to be\n * cached.\n * \n * Instead of actually loading the plugin at this stage, we will just\n * pop its call into our internal call stack for use later. this is\n * useful when we are stepping through an entire hoppfile but might\n * only be running a single task.\n */\nfunction createMethod (type, name, plugName, method, directory) {\n  return function () {\n    const args = [...arguments]\n\n    if (type === 'plugin') {\n      this.d.stack.push([\n        name,\n        method,\n        plugName\n      ])\n\n      this.pluginArgs[plugName] = this.pluginArgs[plugName] || Object.create(null)\n      this.pluginArgs[plugName][method] = args\n    } else {\n      const preset = require(path.resolve(directory, 'node_modules', name))\n      const substack = preset.apply(null, args)\n\n      substack.forEach(row => {\n        const [name] = row\n\n        if (name[0] === '/') {\n          this.d.stack.push(row)\n        } else {\n          this[name].apply(this, row[1])\n        }\n      })\n    }\n\n    return this\n  }\n}\n\n/**\n * Add single plugin to prototype.\n */\nfunction addPlugin (name, plugins, directory) {\n  const type = name.indexOf('plugin') !== -1 ? 'plugin' : 'preset'\n  const plugName = normalize(name)\n\n  debug('adding %s %s as %s', type, name, plugName)\n\n  // check for conflicts\n  if (Hopp.fn[plugName] !== undefined) {\n    throw new Error(`Conflicting ${type}: ${name} (${plugName} already exists)`)\n  }\n\n  // add the plugin to the hopp prototype so it can be\n  // used for the rest of the build process\n  // this function is the proxy of the 'default' function\n  Hopp.fn[plugName] = createMethod(type, name, plugName, 'default', directory)\n\n  // add any other methods\n  for (const method of plugins[name]) {\n    if (method !== '__esModule' && method !== 'config' && method !== 'default') {\n      Hopp.fn[plugName][method] = createMethod(type, name, plugName, method, directory)\n    }\n  }\n}\n\n/**\n * Create hopp object based on plugins.\n */\nexport default directory => {\n  const [fromCache, plugins] = loadPlugins(directory)\n\n  for (const name in plugins) {\n    addPlugin(name, plugins, directory)\n  }\n\n  /**\n   * Expose hopp class for task creation.\n   */\n  const init = src => new Hopp(src)\n\n  init.all = createParallel\n  init.steps = createSteps\n  init.watch = createWatch\n\n  /**\n   * API for loading local plugins.\n   * \n   * Just noop if we've got a valid cache.\n   */\n  init.load = fromCache ? () => undefined : function (pathToPlugin) {\n    debug('loading local plugin: %s', pathToPlugin)\n\n    // try and grab name from package.json\n    // otherwise use the directory's name\n    const pluginName = (() => {\n      try {\n        return require(pathToPlugin + '/package.json').name\n      } catch (_) {\n        return path.basename(pathToPlugin)\n      }\n    })()\n\n    // add to local list in cache\n    const localPlugins = cache.valOr('lp', Object.create(null))\n    localPlugins[pluginName] = pathToPlugin\n\n    // add to list\n    plugins[pluginName] = Object.keys(require(pathToPlugin))\n\n    // run normal add\n    addPlugin(pluginName, plugins, directory)\n  }\n\n  return init\n}\n"]}