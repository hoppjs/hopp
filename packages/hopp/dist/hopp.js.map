{"version":3,"sources":["../src/hopp.js"],"names":["debug","require","normalize","name","normalized","i","length","toUpperCase","createMethod","type","plugName","method","directory","args","arguments","d","stack","push","preset","resolve","substack","apply","forEach","row","plugins","indexOf","prototype","hasOwnProperty","Error","init","src","all","steps","watch"],"mappings":"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","file":"../src/hopp.js","sourcesContent":["/**\n * @file src/hopp.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc..\n */\n\nimport path from 'path'\nimport Hopp from './tasks/mgr'\nimport createSteps from './tasks/steps'\nimport createWatch from './tasks/watch'\nimport loadPlugins from './tasks/loadPlugins'\nimport createParallel from './tasks/parallel'\n\nconst { debug } = require('./utils/log')('hopp')\n\n/**\n * Normalizes a plugin/preset name to be added to\n * the prototype.\n */\nfunction normalize (name) {\n  let normalized = ''\n\n  for (let i = 12; i < name.length; i += 1) {\n    normalized += name[i] === '-' ? name[i++].toUpperCase() : name[i]\n  }\n\n  return normalized\n}\n\n/**\n * Generates a proxy method that allows all the plugin calls to be\n * cached.\n * \n * Instead of actually loading the plugin at this stage, we will just\n * pop its call into our internal call stack for use later. this is\n * useful when we are stepping through an entire hoppfile but might\n * only be running a single task.\n */\nfunction createMethod (type, name, plugName, method, directory) {\n  return function () {\n    const args = [...arguments]\n\n    if (type === 'plugin') {\n      this.d.stack.push([\n        name,\n        args,\n        method\n      ])\n    } else {\n      const preset = require(path.resolve(directory, 'node_modules', name))\n      const substack = preset.apply(null, args)\n\n      substack.forEach(row => {\n        const [name] = row\n\n        if (name[0] === '/') {\n          this.d.stack.push(row)\n        } else {\n          this[name].apply(this, row[1])\n        }\n      })\n    }\n\n    return this\n  }\n}\n\n/**\n * Create hopp object based on plugins.\n */\nexport default directory => {\n  const plugins = loadPlugins(directory)\n\n  for (const name in plugins) {\n    const type = name.indexOf('plugin') !== -1 ? 'plugin' : 'preset'\n    const plugName = normalize(name)\n\n    debug('adding %s %s as %s', type, name, plugName)\n\n    // check for conflicts\n    if (Hopp.prototype.hasOwnProperty(plugName)) {\n      throw new Error(`Conflicting ${type}: ${name} (${plugName} already exists)`)\n    }\n\n    // add the plugin to the hopp prototype so it can be\n    // used for the rest of the build process\n    // this function is the proxy of the 'default' function\n    Hopp.prototype[plugName] = createMethod(type, name, plugName, 'default', directory)\n\n    // add any other methods\n    for (const method of plugins[name]) {\n      if (method !== '__esModule' && method !== 'config' && method !== 'default') {\n        Hopp.prototype[plugName][method] = createMethod(type, name, plugName, method, directory)\n      }\n    }\n  }\n\n  /**\n   * Expose hopp class for task creation.\n   */\n  const init = src => new Hopp(src)\n\n  init.all = createParallel\n  init.steps = createSteps\n  init.watch = createWatch\n\n  return init\n}\n"]}