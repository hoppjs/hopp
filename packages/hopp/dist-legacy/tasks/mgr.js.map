{"version":3,"sources":["../../src/tasks/mgr.js"],"names":["cache","debug","watchlog","log","plugins","Object","create","pluginConfig","isUndefined","value","undefined","Hopp","src","Array","pluginCtx","pluginArgs","d","stack","rename","plugin","fn","bind","method","out","dest","mapper","Error","push","filename","dirname","source","applyRename","basename","ext","substr","lastIndexOf","prefix","suffix","name","directory","recache","watchers","forEach","newpath","resolve","nonMagic","watch","recursive","indexOf","start","process","on","watcher","close","modified","useDoubleCache","sourcemap","files","freshBuild","unmodified","file","originalFd","tmpBundle","tmpBundlePath","bundle","Date","now","stream","createReadStream","fd","autoClose","replace","end","concat","buildStack","add","reject","pipe","createWriteStream","map","that","mode","plugName","pluginStream","obj","data","_","done","args","handler","assign","retval","next","taskName","mod","pathToPlugin","localPlugins","valOr","join","require","err","config","logger","pluginCache","error","safeTimeout","setTimeout","exit","needsBundling","needsRecaching","readonly","length","loadedPlugins","loadPlugin","env","SKIP_BUILD","startBundling","clearTimeout","outfile","doRename","hasOwnProperty","body","output","tmp","tmppath","promise","newStream","resolved","then","val","json"],"mappings":"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","file":"../../src/tasks/mgr.js","sourcesContent":["/**\n * @file src/tasks/mgr.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport fs from 'fs'\nimport path from 'path'\nimport pump from 'pump'\nimport glob from '../fs/glob'\nimport through2 from 'through2'\nimport * as cache from '../cache'\nimport getPath from '../fs/get-path'\nimport { _, createLogger, simplifyError } from '../utils'\nimport { buffer, Bundle, createReadStream, map as mapStream } from '../streams'\nimport { disableFSCache, mkdirp, mkdirpSync, openFile, tmpFile, tmpFileSync } from '../fs'\n\nconst { debug } = createLogger('hopp')\nconst watchlog = createLogger('hopp:watch').log\n\n/**\n * Plugins storage.\n */\nconst plugins = Object.create(null)\nconst pluginConfig = Object.create(null)\n\n/**\n * Test for undefined or null.\n */\nfunction isUndefined (value) {\n  return value === undefined || value === null\n}\n\n/**\n * Hopp class to manage tasks.\n */\nexport default class Hopp {\n  /**\n   * Creates a new task with the glob.\n   * DOES NOT START THE TASK.\n   *\n   * @param {Glob} src\n   * @return {Hopp} new hopp object\n   */\n  constructor (src) {\n    if (!(src instanceof Array)) {\n      src = [src]\n    }\n\n    // store context local to each task\n    this.pluginCtx = Object.create(null)\n\n    // store args separate from context to avoid arg collisions\n    // when a plugin has many methods\n    this.pluginArgs = Object.create(null)\n\n    // persistent info\n    this.d = {\n      src,\n      stack: [],\n      rename: []\n    }\n\n    // do local create\n    for (const plugin in Hopp.fn) {\n      this[plugin] = Hopp.fn[plugin].bind(this)\n\n      for (const method in Hopp.fn[plugin]) {\n        this[plugin][method] = Hopp.fn[plugin][method].bind(this)\n      }\n    }\n  }\n\n  /**\n   * Sets the destination of this pipeline.\n   * @param {String} out\n   * @return {Hopp} task manager\n   */\n  dest (out) {\n    this.d.dest = out\n    return this\n  }\n\n  /**\n   * Allow renaming of destination files.\n   * @param {Object|Function} mapper renaming options or renaming function\n   * @returns {Hopp} current object for chaining\n   */\n  rename (mapper) {\n    if (typeof mapper !== 'function' && typeof mapper !== 'object') {\n      throw new Error('Rename must be given a function or object.')\n    }\n\n    this.d.rename.push(mapper)\n    return this\n  }\n\n  /**\n   * Actually do the renaming.\n   * @param {String} filename the original name\n   * @param {String} dirname the destination directory\n   * @param {String} source the absolute source filename\n   * @returns {String} renamed filename\n   */\n  doRename (filename, dirname, source) {\n    let dest = dirname + '/' + filename\n\n    for (const mapper of this.d.rename) {\n      dest = this.applyRename(mapper, path.basename(dest), path.dirname(dest), source)\n    }\n\n    return dest\n  }\n\n  /**\n   * Apply a single rename.\n   * @param {Object|Function} mapper renaming object or function\n   * @param {String} filename the original name\n   * @param {String} dirname the destination directory\n   * @param {String} source the absolute source filename\n   * @returns {String} renamed filename\n   */\n  applyRename (mapper, filename, dirname, source) {\n    // if no rename is defined, just use current filename\n    if (!mapper) return dirname + '/' + filename\n\n    // functions are easy, but they break caching\n    if (typeof mapper === 'function') {\n      return mapper(filename, dirname, source)\n    }\n\n    // remove extension\n    let ext = filename.substr(1 + filename.lastIndexOf('.'))\n    filename = filename.substr(0, filename.lastIndexOf('.'))\n\n    // add prefix\n    if (mapper.prefix) {\n      filename = mapper.prefix + filename\n    }\n\n    // add suffix, before extension\n    if (mapper.suffix) {\n      filename += mapper.suffix\n    }\n\n    // change extension\n    if (mapper.ext) {\n      ext = mapper.ext\n    }\n\n    // output final filename into same dest directory\n    return dirname + '/' + filename + '.' + ext\n  }\n\n  /**\n   * Run task in continuous mode.\n   */\n  watch (name, directory, recache = false) {\n    name = `watch:${name}`\n\n    const watchers = []\n\n    this.d.src.forEach(src => {\n      // get most definitive path possible\n      let newpath = path.resolve(directory, glob.nonMagic(src))\n\n      // disable fs caching for watch\n      disableFSCache()\n\n      // start watch\n      watchlog('Watching for %s ...', name)\n      watchers.push(fs.watch(newpath, {\n        recursive: src.indexOf('/**/') !== -1\n      }, () => this.start(name, directory, recache, false)))\n    })\n\n    return new Promise(resolve => {\n      process.on('SIGINT', () => {\n        watchers.forEach(watcher => watcher.close())\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Handles bundling.\n   */\n  async startBundling (name, directory, modified, dest, useDoubleCache = true) {\n    const { log, debug } = createLogger(`hopp:${name}`)\n    debug('Switched to bundling mode')\n\n    /**\n     * Fetch sourcemap from cache.\n     */\n    const sourcemap = cache.sourcemap(name)\n\n    /**\n     * Get full list of current files.\n     */\n    const files = await glob(name, this.d.src, directory, useDoubleCache, true)\n\n    /**\n     * Create list of unmodified.\n     */\n    let freshBuild = true\n    const unmodified = Object.create(null)\n\n    for (let file of files) {\n      if (modified.indexOf(file) === -1) {\n        unmodified[file] = true\n        freshBuild = false\n      }\n    }\n\n    /**\n     * Get old bundle & create new one.\n     */\n    const originalFd = freshBuild ? null : await openFile(dest, 'r')\n    const [tmpBundle, tmpBundlePath] = await tmpFile()\n\n    /**\n     * Create new bundle to forward to.\n     */\n    const bundle = new Bundle(directory, tmpBundle)\n\n    /**\n     * Since bundling starts streaming right away, we can count this\n     * as the start of the build.\n     */\n    const start = Date.now()\n    log('Starting task')\n\n    /**\n     * Add all files.\n     */\n    for (let file of files) {\n      let stream\n\n      if (unmodified[file]) {\n        debug('forward: %s', file)\n        stream = fs.createReadStream(null, {\n          fd: originalFd,\n          autoClose: false,\n          start: sourcemap[file.replace(directory, '.')].start,\n          end: sourcemap[file.replace(directory, '.')].end\n        })\n      } else {\n        debug('transform: %s', file)\n        stream = pump([\n          createReadStream(file, dest + '/' + path.basename(file), directory)\n        ].concat(this.buildStack(name)))\n      }\n\n      bundle.add(file, stream)\n    }\n\n    /**\n     * Wait for bundling to end.\n     */\n    await bundle.end(tmpBundlePath)\n\n    /**\n     * Move the bundle to the new location.\n     */\n    if (originalFd) originalFd.close()\n    await mkdirp(path.dirname(dest).replace(directory, ''), directory)\n    await new Promise((resolve, reject) => {\n      const stream = fs.createReadStream(tmpBundlePath).pipe(fs.createWriteStream(dest))\n\n      stream.on('close', resolve)\n      stream.on('error', reject)\n    })\n\n    /**\n     * Update sourcemap.\n     */\n    cache.sourcemap(name, bundle.map)\n\n    log('Task ended (took %s ms)', Date.now() - start)\n  }\n\n  /**\n   * Converts all plugins in the stack into streams.\n   */\n  buildStack (name) {\n    const that = this\n\n    let mode = 'stream'\n\n    return this.d.stack.map(([plugin, method, plugName]) => {\n      const pluginStream = through2.obj(async function (data, _, done) {\n        try {\n          /**\n           * Grab args.\n           */\n          const args = (that.pluginArgs[plugName] || {})[method] || []\n\n          /**\n           * Try and get proper method - assume\n           * default by default.\n           */\n          const handler = plugins[plugin][method || 'default'](\n            Object.assign(\n              {},\n              that.pluginCtx[plugin],\n              { args }\n            ),\n            data\n          )\n\n          // for async functions/promises\n          if ('then' in handler) {\n            try {\n              this.push(await handler)\n              done()\n            } catch (err) {\n              done(simplifyError(err, new Error()))\n            }\n          } else if ('next' in handler) {\n            let retval\n\n            // for async generators\n            do {\n              retval = await handler.next()\n              this.push(retval.value)\n            } while (!retval.done)\n\n            done()\n          } else {\n            // otherwise, fail\n            done(new Error('Unknown return value received from ' + plugin))\n          }\n        } catch (err) {\n          done(simplifyError(err, new Error()))\n        }\n      })\n\n      /**\n       * Enable buffer mode if required.\n       */\n      if (mode === 'stream' && pluginConfig[plugin].mode === 'buffer') {\n        mode = 'buffer'\n        return pump(buffer(), pluginStream)\n      }\n\n      /**\n       * Otherwise keep pumping.\n       */\n      return pluginStream\n    })\n  }\n\n  /**\n   * Loads a plugin, manages its env.\n   */\n  loadPlugin (taskName, plugin, plugName, directory) {\n    let mod = plugins[plugin]\n\n    if (!mod) {\n      // convert plugin path from relative back to absolute\n      try {\n        let pathToPlugin = plugin\n\n        if (plugin[0] !== '/') {\n          const localPlugins = cache.valOr('lp', Object.create(null))\n          pathToPlugin = localPlugins[plugin] || path.join(directory, 'node_modules', plugin)\n        }\n\n        mod = require(pathToPlugin)\n      } catch (err) {\n        debug('failed to load plugin: %s', err && err.stack ? err.stack : err)\n        throw new Error('Failed to load plugin: ' + plugin)\n      }\n\n      // expose module config\n      pluginConfig[plugin] = mod.config || Object.create(null)\n\n      // add plugins to loaded plugins\n      plugins[plugin] = mod\n    }\n\n    // create plugin logger\n    const logger = createLogger(`${taskName}:${plugName}}`)\n\n    // load/create cache for plugin\n    const pluginCache = cache.plugin(plugin)\n\n    // create a new context for this plugin\n    this.pluginCtx[plugin] = {\n      args: [],\n      cache: pluginCache,\n      log: logger.log,\n      debug: logger.debug,\n      error: logger.error\n    }\n  }\n\n  /**\n   * Starts the pipeline.\n   * @return {Promise} resolves when task is complete\n   */\n  async start (name, directory, recache = false, useDoubleCache = true) {\n    const { log, debug, error } = createLogger(name)\n\n    /**\n     * Add timeout for safety.\n     */\n    const safeTimeout = setTimeout(() => {\n      error('Timeout exceeded! Task was hung.')\n      process.exit(-1)\n    }, 6e4)\n\n    /**\n     * Figure out if bundling is needed & load plugins.\n     */\n    if (isUndefined(this.needsBundling) || isUndefined(this.needsRecaching) || isUndefined(this.readonly) || (this.d.stack.length > 0 && !this.loadedPlugins)) {\n      this.loadedPlugins = true\n\n      this.d.stack.forEach(([plugin, _, plugName]) => {\n        if (!this.pluginCtx[plugin]) {\n          this.loadPlugin(name, plugin, plugName, directory)\n        }\n\n        this.needsBundling = !!(this.needsBundling || pluginConfig[plugin].bundle)\n        this.needsRecaching = !!(this.needsRecaching || pluginConfig[plugin].recache)\n        this.readonly = !!(this.readonly || pluginConfig[plugin].readonly)\n\n        if (this.needsBundling && this.readonly) {\n          throw new Error('Task chain enabled bundling and readonly mode at the same time. Not sure what to do.')\n        }\n      })\n    }\n\n    /**\n     * Override recaching.\n     */\n    if (this.needsRecaching) {\n      recache = true\n    }\n\n    /**\n     * Get the modified files.\n     */\n    debug('task recache = %s', recache)\n    let files = await glob(name, this.d.src, directory, useDoubleCache, recache)\n\n    /**\n     * Quit now if we want to build skipping.\n     */\n    if (process.env.SKIP_BUILD === 'true') {\n      log('Updated cache')\n      return\n    }\n\n    if (files.length > 0) {\n      const dest = this.d.dest ? path.resolve(directory, getPath(this.d.dest)) : ''\n\n      /**\n       * Switch to bundling mode if need be.\n       */\n      if (this.needsBundling) {\n        await this.startBundling(name, directory, files, dest, useDoubleCache)\n        clearTimeout(safeTimeout)\n        return\n      }\n\n      /**\n       * Ensure dist directory exists.\n       */\n      if (!this.readonly || !this.d.dest) {\n        await mkdirp(dest.replace(directory, ''), directory)\n      }\n\n      /**\n       * Create streams.\n       */\n      files = _(files).map(file => {\n        const outfile = this.doRename(path.basename(file), dest, file)\n\n        return {\n          file,\n          outfile,\n          stream: [\n            createReadStream(file, outfile, directory)\n          ]\n        }\n      })\n\n      /**\n       * Connect plugin streams with pipelines.\n       */\n      if (this.d.stack.length > 0) {\n        files.map(file => {\n          file.stream = file.stream.concat(this.buildStack(name))\n          return file\n        })\n      }\n\n      /**\n       * Connect with destination.\n       */\n      files.map(file => {\n        if (!this.readonly) {\n          // strip out the actual body and write it\n          file.stream.push(mapStream((data, next) => {\n            if (typeof data !== 'object' || !data.hasOwnProperty('body')) {\n              return next(new Error('A plugin has destroyed the stream by returning a non-object.'))\n            }\n\n            next(null, data.body)\n          }))\n\n          // add the writestream at the end\n          let output\n\n          if (!this.d.dest) {\n            const { fd: tmp, name: tmppath } = tmpFileSync()\n            output = fs.createWriteStream(null, {\n              fd: tmp\n            })\n\n            file.promise = new Promise((resolve, reject) => {\n              output.on('close', () => {\n                const newStream =\n                  fs.createReadStream(tmppath)\n                    .pipe(fs.createWriteStream(file.file))\n\n                newStream.on('error', reject)\n                newStream.on('close', resolve)\n              })\n            })\n          } else {\n            debug('Set output: %s', file.outfile)\n            mkdirpSync(path.dirname(file.outfile).replace(directory, ''), directory)\n            output = fs.createWriteStream(file.outfile)\n          }\n\n          file.stream.push(output)\n        }\n\n        // promisify the current pipeline\n        return new Promise((resolve, reject) => {\n          let resolved = false\n\n          // connect all streams together to form pipeline\n          file.stream = pump(file.stream, err => {\n            if (err) reject(simplifyError(err, new Error()))\n            else if (!resolved && !file.promise) resolve()\n          })\n\n          if (file.promise) {\n            file.promise.then(() => {\n              resolved = true\n              resolve()\n            }, reject)\n          }\n        })\n      })\n\n      // start & wait for all pipelines to end\n      const start = Date.now()\n      log('Starting task for %s files', files.length)\n      await Promise.all(files.val())\n      log('Task ended (took %s ms)', Date.now() - start)\n\n      // clear the timeout\n      clearTimeout(safeTimeout)\n    } else {\n      log('Skipping task')\n    }\n  }\n\n  /**\n   * Converts task manager to JSON for storage.\n   * @return {Object} proper JSON object\n   */\n  toJSON () {\n    return {\n      d: this.d,\n      needsBundling: this.needsBundling,\n      needsRecaching: this.needsRecaching,\n      readonly: this.readonly\n    }\n  }\n\n  /**\n   * Deserializes a JSON object into a manager.\n   * @param {Object} json\n   * @return {Hopp} task manager\n   */\n  fromJSON (json) {\n    this.d = json.d\n    this.needsBundling = json.needsBundling\n    this.needsRecaching = json.needsRecaching\n    this.readonly = json.readonly\n\n    return this\n  }\n}\n\n/**\n * Extended prototype for plugins to be appended to.\n */\nHopp.fn = Object.create(null)\n"]}