{"version":3,"sources":["../../src/tasks/loadPlugins.js"],"names":["cache","pkgFile","directory","pkg","require","pkgStat","mtime","val","Object","create","savedStat","list","key","hasOwnProperty","dep","start","substr","keys"],"mappings":";;;;;;ypBAAA;;;;;;AAMA;;IAAYA,K;;AACZ;;;;AAEA;;;;;kBAKe,qBAAa;AAC1B,MAAMC,UAAUC,YAAY,eAA5B;;AAEA;AACA,MAAI,CAAC,oBAAWD,OAAX,CAAL,EAA0B;AACxB;AACD;;AAED,MAAME,MAAMC,QAAQH,OAAR,CAAZ;AACA,MAAMI,UAAU,CAAC,kBAASJ,OAAT,EAAkBK,KAAnC;;AAT0B,aAWFN,MAAMO,GAAN,CAAU,IAAV,KAAmB,CAAC,CAAD,EAAIC,OAAOC,MAAP,CAAc,IAAd,CAAJ,CAXjB;AAAA;AAAA,MAWrBC,SAXqB;AAAA,MAWVC,IAXU;;AAa1B;;;;;AAGA,MAAID,cAAcL,OAAlB,EAA2B;AACzB,WAAOM,IAAP;AACD;;AAED;;;AAGAA,SAAOH,OAAOC,MAAP,CAAc,IAAd,CAAP;AAvB0B,aAwBR,CAAC,cAAD,EAAiB,iBAAjB,EAAoC,kBAApC,CAxBQ;AAwB1B,2CAA2E;AAAtE,QAAMG,cAAN;AACH,QAAIT,IAAIU,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AAC3B,WAAK,IAAME,GAAX,IAAkBX,IAAIS,GAAJ,CAAlB,EAA4B;AAC1B,YAAMG,QAAQD,IAAIE,MAAJ,CAAW,CAAX,EAAc,EAAd,CAAd;;AAEA,YAAID,UAAU,cAAV,IAA4BA,UAAU,cAA1C,EAA0D;AACxDJ,eAAKG,GAAL,IAAYN,OAAOS,IAAP,CACVb,QAAS,GAAEF,SAAU,iBAAgBY,GAAI,EAAzC,CADU,CAAZ;AAGD;AACF;AACF;AACF;;AAED;;;AAGAd,QAAMO,GAAN,CAAU,IAAV,EAAgB,CACdF,OADc,EAEdM,IAFc,CAAhB;;AAKA;;;AAGA,SAAOA,IAAP;AACD,C","file":"../../src/tasks/loadPlugins.js","sourcesContent":["/**\n * @file src/plugins/load.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport * as cache from '../cache'\nimport { statSync, existsSync } from 'fs'\n\n/**\n * Loads the list of plugins defined in the package.json.\n * @param {String} path to directory with package.json\n * @return {Promise} resolves with array of paths to plugins\n */\nexport default directory => {\n  const pkgFile = directory + '/package.json'\n\n  // ignore if there is no package.json file\n  if (!existsSync(pkgFile)) {\n    return\n  }\n\n  const pkg = require(pkgFile)\n  const pkgStat = +statSync(pkgFile).mtime\n\n  let [savedStat, list] = cache.val('pl') || [0, Object.create(null)]\n\n  /**\n   * Return cached result if unmodified.\n   */\n  if (savedStat === pkgStat) {\n    return list\n  }\n\n  /**\n   * Filter for appropriate dependencies.\n   */\n  list = Object.create(null)\n  for (const key of ['dependencies', 'devDependencies', 'peerDependencies']) {\n    if (pkg.hasOwnProperty(key)) {\n      for (const dep in pkg[key]) {\n        const start = dep.substr(0, 12)\n\n        if (start === 'hopp-plugin-' || start === 'hopp-preset-') {\n          list[dep] = Object.keys(\n            require(`${directory}/node_modules/${dep}`)\n          )\n        }\n      }\n    }\n  }\n\n  /**\n   * Store in cache.\n   */\n  cache.val('pl', [\n    pkgStat,\n    list\n  ])\n\n  /**\n   * Return saved list.\n   */\n  return list\n}\n"]}