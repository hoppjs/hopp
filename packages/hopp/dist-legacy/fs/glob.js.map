{"version":3,"sources":["../../src/fs/glob.js"],"names":["task","pattern","cwd","useDoubleCache","relative","pttn","directory","recursive","debug","recache","slice","length","curr","shift","localResults","file","filepath","sep","relativepath","fstat","tempCache","retrievedCache","statCache","isFile","mtime","push","walk","concat","isDirectory","Array","gstatCache","undefined","cache","valOr","Object","create","process","env","RECACHE","results","Error","nm","glob","nonMagic","split","replace","substr","resolve","require","newpath","sub","indexOf"],"mappings":"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","file":"../../src/fs/glob.js","sourcesContent":["/**\n * @file src/glob.js\n * @license MIT\n * @copyright 2017 10244872 Canada Inc.\n */\n\nimport path from 'path'\nimport match from 'minimatch'\nimport * as cache from '../cache'\nimport { readdir, stat } from './'\n\nconst { debug } = require('../utils/log')('hopp:glob')\n\nlet gstatCache\nconst tempCache = Object.create(null)\n\nasync function glob (task, pattern, cwd, useDoubleCache = false, recache = false) {\n  // prefer arrays\n  if (!(pattern instanceof Array)) {\n    pattern = [pattern]\n  }\n\n  // ensure global cache is present\n  if (gstatCache === undefined) {\n    gstatCache = cache.valOr('sc', Object.create(null))\n  }\n\n  // create local cache\n  if (gstatCache[task] === undefined) {\n    gstatCache[task] = Object.create(null)\n  }\n\n  // create new local cache and load the retreived cache\n  let retrievedCache = gstatCache[task]\n  let statCache = Object.create(null)\n\n  // replace the retreived with new cache to get rid of stale\n  // entries\n  gstatCache[task] = statCache\n\n  // allow overrides from the env\n  recache = recache || process.env.RECACHE === 'true'\n\n  /**\n   * Recursive walk.\n   */\n  async function walk (relative, pttn, directory, recursive = false) {\n    debug('walk(relative = %s, pttn = %s, directory = %s, recursive = %s) in %s [recache:%s, curr:%s]', relative, pttn, directory, recursive, cwd, recache, pttn[0])\n\n    pttn = pttn.slice()\n\n    if (pttn.length === 0) {\n      return []\n    }\n\n    const curr = pttn.shift()\n    let localResults = []\n\n    for (let file of (await readdir(directory))) {\n      // fix file path\n      const filepath = directory + path.sep + file\n      const relativepath = relative + path.sep + file\n\n      // get stat from temp cache (for non-watch tasks) or stat()\n      let fstat\n\n      if (useDoubleCache) {\n        fstat = tempCache[filepath] = tempCache[filepath] || await stat(filepath)\n      } else {\n        fstat = await stat(filepath)\n      }\n\n      // pull from old cache, if it still exists\n      if (retrievedCache[relativepath]) {\n        statCache[relativepath] = retrievedCache[relativepath]\n      }\n\n      debug('match(%s,%s) => %s [%s]', filepath, curr, match(file, curr), fstat.isFile() ? 'file' : 'dir')\n\n      // has been modified\n      debug('stat(%s) :: %s', +fstat.mtime, statCache[relativepath])\n\n      if (match(file, curr)) {\n        if (fstat.isFile()) {\n          if (recache || !statCache[relativepath] || statCache[relativepath] !== +fstat.mtime) {\n            statCache[relativepath] = +fstat.mtime\n            localResults.push(filepath)\n\n            debug('add: %s', filepath)\n          }\n        } else {\n          localResults = localResults.concat(await walk(relativepath, pttn, filepath, recursive || curr === '**'))\n        }\n      } else if (fstat.isDirectory() && recursive) {\n        localResults = localResults.concat(await walk(relativepath, [curr].concat(pttn), filepath, recursive))\n      }\n    }\n\n    return localResults\n  }\n\n  /**\n   * Run all patterns against directory.\n   */\n  let results = []\n  for (let pttn of pattern) {\n    if (pttn[0] === '/') {\n      throw new Error('Not sure what to do with the / in your glob.')\n    }\n\n    const nm = glob.nonMagic(pttn)\n    debug('nm = %j', nm)\n\n    if (!nm) {\n      results = results.concat(await walk(\n        '.',\n        pttn.split('/'),\n        cwd\n      ))\n    } else {\n      results = results.concat(await walk(\n        nm,\n        pttn.replace(nm, '').substr(1).split('/'),\n        path.resolve(cwd, nm)\n      ))\n    }\n  }\n\n  /**\n   * Return final results object.\n   */\n  return results\n}\n\n/**\n * Get non-magical start of glob.\n * @param {String} pattern glob pattern\n * @returns {String} definitive path\n */\nglob.nonMagic = function (pattern) {\n  let newpath = ''\n\n  for (let sub of pattern.split('/')) {\n    if (sub) {\n      if (sub.indexOf('*') !== -1) {\n        break\n      }\n\n      newpath += path.sep + sub\n    }\n  }\n\n  return newpath.substr(1)\n}\n\nexport default glob\n"]}