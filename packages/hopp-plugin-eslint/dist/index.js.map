{"version":3,"sources":["../lib/index.js"],"names":["require","config","mode","readonly","ctx","data","linter","args","lintResults","executeOnText","body","toString","file","hasOwnProperty","console","log","output","format","formatters","Object","create","formatter","getFormatter","firstResult","forEach","call","results","result","msg","failOnError","count","errorCount","Error"],"mappings":";;;;;;;AAKA;;2cALA;;;;;AAOA;;;AAGAA,QAAQ,6BAAR;;AAEA;;;;AAIO,IAAMC,0BAAS;AACpBC,QAAM,QADc;AAEpBC,YAAU;;AAGZ;;;;;;AALsB,CAAf;;uDAWQ,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AACb;AACA,gBAAI,CAACD,IAAIE,MAAT,EAAiB;AACfF,kBAAIE,MAAJ,GAAa,sBAAcF,IAAIG,IAAJ,CAAS,CAAT,KAAe,EAA7B,CAAb;AACD;;AAED;AACAF,iBAAKG,WAAL,GAAmBJ,IAAIE,MAAJ,CAAWG,aAAX,CACjBJ,KAAKK,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CADiB,EAEjBN,KAAKO,IAFY,CAAnB;;AAKA;AACI,gBAAIP,KAAKG,WAAL,CAAiBK,cAAjB,CAAgC,QAAhC,CAAJ,EAA+C;AACjDC,sBAAQC,GAAR,CAAY,gBAAZ;AACAV,mBAAKK,IAAL,GAAYL,KAAKG,WAAL,CAAiBQ,MAA7B;AACD;;AAED;AAlBa,6CAmBNX,IAnBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;AAsBf;;;;;AAGO,IAAMY;AAAA,wDAAS,kBAAOb,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACAD,gBAAIc,UAAJ,GAAiBd,IAAIc,UAAJ,IAAkBC,OAAOC,MAAP,CAAc,IAAd,CAAnC;AACMC,qBAHc,GAGFjB,IAAIG,IAAJ,CAAS,CAAT,KAAe,SAHb;;AAIpBH,gBAAIc,UAAJ,CAAeG,SAAf,IAA4BjB,IAAIc,UAAJ,CAAeG,SAAf,KAA6B,kBAAUC,YAAV,CAAuBD,SAAvB,CAAzD;;AAEIE,uBANgB;AAOnB,eAAGC,OAAH,CAAWC,IAAX,CAAgBpB,KAAKG,WAAL,CAAiBkB,OAAjC,EAA0C,kBAAU;AACnD,kBAAI,CAACH,WAAL,EAAkB;AAChBA,8BAAcI,OAAO1B,MAArB;AACD;;AAED,kBAAM2B,MAAMxB,IAAIc,UAAJ,CAAeG,SAAf,EAA0BhB,KAAKG,WAAL,CAAiBkB,OAA3C,EAAoDH,WAApD,CAAZ;;AAEA,kBAAIK,GAAJ,EAAS;AACPd,wBAAQC,GAAR,CAAY,MAAZ,EAAoBa,GAApB;AACD;AACF,aAVA;;AAPmB,8CAmBbvB,IAnBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAsBP;;;AAGO,IAAMwB;AAAA,wDAAc,kBAAOzB,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACnByB,iBADmB,GACXzB,KAAKG,WAAL,CAAiBuB,UAAjB,GAA8B,CADnB;;AAAA,kBAGrBD,QAAQ,CAHa;AAAA;AAAA;AAAA;;AAAA,kBAIjB,IAAIE,KAAJ,CAAW,eAAcF,KAAM,UAA/B,CAJiB;;AAAA;AAAA,8CAOlBzB,IAPkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"../lib/index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nimport { CLIEngine } from 'eslint'\n\n/**\n * For node v4.\n */\nrequire('regenerator-runtime/runtime')\n\n/**\n * Buffer mode, since we're doing static analysis.\n * Readonly since we're not letting hopp handle the output.\n */\nexport const config = {\n  mode: 'buffer',\n  readonly: true\n}\n\n/**\n * Regular linting function. Just passes the results\n * down the stream.\n * \n * @param {Object} options eslint options\n */\nexport default async (ctx, data) => {\n  // create new linter\n  if (!ctx.linter) {\n    ctx.linter = new CLIEngine(ctx.args[0] || {})\n  }\n\n  // lint file\n  data.lintResults = ctx.linter.executeOnText(\n    data.body.toString('utf8'),\n    data.file\n  )\n\n  // try and fix data\n      if (data.lintResults.hasOwnProperty('output')) {\n    console.log('applying fixes')\n    data.body = data.lintResults.output\n  }\n\n  // passthrough\n  return data\n}\n\n/**\n * Sets the formatter to be used for reporting.\n */\nexport const format = async (ctx, data) => {\n  // grab formatter\n  ctx.formatters = ctx.formatters || Object.create(null)\n  const formatter = ctx.args[0] || 'stylish'\n  ctx.formatters[formatter] = ctx.formatters[formatter] || CLIEngine.getFormatter(formatter)\n\n  let firstResult\n  ;[].forEach.call(data.lintResults.results, result => {\n    if (!firstResult) {\n      firstResult = result.config\n    }\n\n    const msg = ctx.formatters[formatter](data.lintResults.results, firstResult)\n\n    if (msg) {\n      console.log('\\n%s', msg)\n    }\n  })\n\n  return data\n}\n\n/**\n * Triggers failure if there are linting errors.\n */\nexport const failOnError = async (ctx, data) => {\n  const count = data.lintResults.errorCount | 0\n\n  if (count > 0) {\n    throw new Error(`Failed with ${count} errors.`)\n  }\n\n  return data\n}\n"]}