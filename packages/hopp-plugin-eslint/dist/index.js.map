{"version":3,"sources":["../lib/index.js"],"names":["require","config","mode","readonly","ctx","data","linter","args","lintResults","executeOnText","body","toString","file","results","output","format","formatters","Object","create","formatter","getFormatter","firstResult","messages","find","result","forEach","call","msg","console","log","failOnError","count","errorCount","Error"],"mappings":";;;;;;;AAKA;;2cALA;;;;;AAOA;;;AAGAA,QAAQ,6BAAR;;AAEA;;;;AAIO,IAAMC,0BAAS;AACpBC,QAAM,QADc;AAEpBC,YAAU;;AAGZ;;;;;;AALsB,CAAf;;uDAWQ,iBAAOC,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AACb;AACA,gBAAI,CAACD,IAAIE,MAAT,EAAiB;AACfF,kBAAIE,MAAJ,GAAa,sBAAcF,IAAIG,IAAJ,CAAS,CAAT,KAAe,EAA7B,CAAb;AACD;;AAED;AACAF,iBAAKG,WAAL,GAAmBJ,IAAIE,MAAJ,CAAWG,aAAX,CACjBJ,KAAKK,IAAL,CAAUC,QAAV,CAAmB,MAAnB,CADiB,EAEjBN,KAAKO,IAFY,EAGjBC,OAHiB,CAGT,CAHS,CAAnB;;AAKA;AACA,gBAAIR,KAAKG,WAAL,CAAiBM,MAAjB,IAA2BT,KAAKG,WAAL,CAAiBM,MAAjB,KAA4BT,KAAKK,IAAhE,EAAsE;AACpEL,mBAAKK,IAAL,GAAYL,KAAKG,WAAL,CAAiBM,MAA7B;AACD;;AAED;AAjBa,6CAkBNT,IAlBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;;;;AAqBf;;;;;AAGO,IAAMU;AAAA,wDAAS,kBAAOX,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACAD,gBAAIY,UAAJ,GAAiBZ,IAAIY,UAAJ,IAAkBC,OAAOC,MAAP,CAAc,IAAd,CAAnC;AACMC,qBAHc,GAGFf,IAAIG,IAAJ,CAAS,CAAT,KAAe,SAHb;;AAIpBH,gBAAIY,UAAJ,CAAeG,SAAf,IAA4Bf,IAAIY,UAAJ,CAAeG,SAAf,KAA6B,kBAAUC,YAAV,CAAuBD,SAAvB,CAAzD;;AAEME,uBANc,GAMA,CAAChB,KAAKG,WAAL,CAAiBc,QAAjB,CAA0BC,IAA1B,CAA+B;AAAA,qBAAUC,OAAOvB,MAAjB;AAAA,aAA/B,KAA2D,EAA5D,EAAgEA,MANhE;AAQnB,eAAGwB,OAAH,CAAWC,IAAX,CAAgBrB,KAAKG,WAAL,CAAiBc,QAAjC,EAA2C,kBAAU;AACpD,kBAAMK,MAAMvB,IAAIY,UAAJ,CAAeG,SAAf,EAA0B,CAACd,KAAKG,WAAN,CAA1B,EAA8Ca,WAA9C,CAAZ;;AAEA,kBAAIM,GAAJ,EAAS;AACPC,wBAAQC,GAAR,CAAY,MAAZ,EAAoBF,GAApB;AACD;AACF,aANA;;AARmB,8CAgBbtB,IAhBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAT;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAmBP;;;AAGO,IAAMyB;AAAA,wDAAc,kBAAO1B,GAAP,EAAYC,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACnB0B,iBADmB,GACX1B,KAAKG,WAAL,CAAiBwB,UAAjB,GAA8B,CADnB;;AAAA,kBAGrBD,QAAQ,CAHa;AAAA;AAAA;AAAA;;AAAA,kBAIjB,IAAIE,KAAJ,CAAW,eAAcF,KAAM,UAA/B,CAJiB;;AAAA;AAAA,8CAOlB1B,IAPkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"../lib/index.js","sourcesContent":["/**\n * @file index.src.js\n * @license MIT\n */\n\nimport { CLIEngine } from 'eslint'\n\n/**\n * For node v4.\n */\nrequire('regenerator-runtime/runtime')\n\n/**\n * Buffer mode, since we're doing static analysis.\n * Readonly since we're not letting hopp handle the output.\n */\nexport const config = {\n  mode: 'buffer',\n  readonly: true\n}\n\n/**\n * Regular linting function. Just passes the results\n * down the stream.\n * \n * @param {Object} options eslint options\n */\nexport default async (ctx, data) => {\n  // create new linter\n  if (!ctx.linter) {\n    ctx.linter = new CLIEngine(ctx.args[0] || {})\n  }\n\n  // lint file\n  data.lintResults = ctx.linter.executeOnText(\n    data.body.toString('utf8'),\n    data.file\n  ).results[0]\n\n  // try and fix data\n  if (data.lintResults.output && data.lintResults.output !== data.body) {\n    data.body = data.lintResults.output\n  }\n\n  // passthrough\n  return data\n}\n\n/**\n * Sets the formatter to be used for reporting.\n */\nexport const format = async (ctx, data) => {\n  // grab formatter\n  ctx.formatters = ctx.formatters || Object.create(null)\n  const formatter = ctx.args[0] || 'stylish'\n  ctx.formatters[formatter] = ctx.formatters[formatter] || CLIEngine.getFormatter(formatter)\n\n  const firstResult = (data.lintResults.messages.find(result => result.config) || {}).config\n\n  ;[].forEach.call(data.lintResults.messages, result => {\n    const msg = ctx.formatters[formatter]([data.lintResults], firstResult)\n\n    if (msg) {\n      console.log('\\n%s', msg)\n    }\n  })\n\n  return data\n}\n\n/**\n * Triggers failure if there are linting errors.\n */\nexport const failOnError = async (ctx, data) => {\n  const count = data.lintResults.errorCount | 0\n\n  if (count > 0) {\n    throw new Error(`Failed with ${count} errors.`)\n  }\n\n  return data\n}\n"]}